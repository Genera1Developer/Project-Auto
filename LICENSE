import socket
import threading
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def handle_client(client_socket):
    """Handles communication with a single client."""
    try:
        request = client_socket.recv(4096).decode()  # Increased buffer size

        # Check for empty request
        if not request:
            logging.warning("Empty request received, closing connection.")
            return

        # Extract hostname and port from request
        first_line = request.split('\n')[0]
        try:
            url = first_line.split(' ')[1]
        except IndexError:
            logging.error(f"Invalid request format: {first_line}")
            client_socket.sendall(b"HTTP/1.0 400 Bad Request\r\n\r\n")
            return

        hostname = url.split('/')[2] if '//' in url else url.split('/')[0]  # Corrected hostname extraction.
        port = 80  # Default port

        # Check for explicit port in hostname
        if ':' in hostname:
            hostname, port = hostname.split(':')
            try:
                port = int(port)
            except ValueError:
                logging.error(f"Invalid port number: {port}")
                client_socket.sendall(b"HTTP/1.0 400 Bad Request\r\n\r\n")
                return

        # Create a socket to connect to the remote server
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            server_socket.connect((hostname, port))
        except socket.gaierror as e:
            logging.error(f"Failed to resolve hostname {hostname}: {e}")
            client_socket.sendall(b"HTTP/1.0 404 Not Found\r\n\r\n")
            return
        except socket.error as e:
            logging.error(f"Connection error to {hostname}:{port}: {e}")
            client_socket.sendall(b"HTTP/1.0 502 Bad Gateway\r\n\r\n")
            return


        # Forward the client's request to the server
        server_socket.sendall(request.encode())  # Explicitly encode request

        # Receive data from the server and forward it to the client
        while True:
            data = server_socket.recv(4096)  # Increased buffer size
            if not data:
                break
            client_socket.sendall(data)

    except Exception as e:
        logging.exception("Exception in handle_client") # Log full exception
    finally:
        try:
            server_socket.close()
        except NameError:
            pass #server_socket might not be defined if connection failed
        client_socket.close()


def main():
    """Main function to start the proxy server."""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', 8080)  # Listen on localhost:8080

    try:
        server_socket.bind(server_address)
    except socket.error as e:
        logging.error(f"Could not bind to {server_address}: {e}")
        return

    server_socket.listen(5)  # Listen for up to 5 incoming connections

    logging.info(f"Proxy server listening on {server_address}")

    try:
        while True:
            client_socket, client_address = server_socket.accept()
            logging.info(f"Accepted connection from {client_address}")

            # Create a new thread to handle the client
            client_thread = threading.Thread(target=handle_client, args=(client_socket,))
            client_thread.daemon = True # Allow the program to exit even if this thread is running
            client_thread.start()
    except KeyboardInterrupt:
        logging.info("Shutting down the proxy server.")
    finally:
        server_socket.close()

if __name__ == "__main__":
    main()