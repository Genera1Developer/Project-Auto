#themeSelector {
    position: fixed;
    top: 60px;
    right: 16px;
    background: var(--theme-button-bg, linear-gradient(45deg, var(--primary-glow), var(--secondary-glow)));
    border: 1px solid var(--theme-button-border, rgba(255, 255, 255, 0.1));
    color: var(--theme-button-color, white);
    padding: 8px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

#themeSelector:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 15px var(--primary-glow), 0 4px 8px rgba(0, 0, 0, 0.3);
}

.theme-dropdown {
    position: fixed;
    top: 100px;
    right: 16px;
    background: var(--dropdown-bg, rgba(0, 0, 0, 0.7));
    backdrop-filter: blur(10px);
    border: 1px solid var(--dropdown-border, rgba(255, 255, 255, 0.1));
    border-radius: 8px;
    padding: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    display: none;
    z-index: 1000;
    width: 180px;
}

.theme-dropdown.active {
    display: block;
}

.theme-item {
    display: flex;
    align-items: center;
    padding: 8px;
    border-radius: 4px;
    cursor: pointer;
    color: var(--theme-item-color, white);
    transition: all 0.3s ease;
    margin-bottom: 4px;
}

.theme-item:last-child {
    margin-bottom: 0;
}

.theme-item:hover {
    background: var(--theme-item-hover-bg, rgba(255, 255, 255, 0.1));
    transform: translateY(-2px);
    box-shadow: 0 0 10px var(--primary-glow), 0 2px 4px rgba(0, 0, 0, 0.2);
}

.theme-preview {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 8px;
    border: 2px solid var(--theme-preview-border, rgba(255, 255, 255, 0.2));
    transition: all 0.3s ease;
}

.theme-preview:hover {
    border-color: var(--primary-glow);
    box-shadow: 0 0 5px var(--primary-glow);
}
edit filepath: public/style.css
content: body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: var(--background);
    color: var(--text-color);
    transition: background 0.3s ease, color 0.3s ease;
}

:root {
    --primary-glow: #00bcd4;
    --secondary-glow: #e91e63;
    --background: #2c3e50;
    --text-color: #ecf0f1;
}

.container {
    width: 80%;
    max-width: 1200px;
    padding: 20px;
    background-color: var(--container-bg, rgba(255, 255, 255, 0.1));
    backdrop-filter: blur(10px);
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
}

h1 {
    color: var(--text-color);
    margin-bottom: 20px;
}

.input-area {
    margin-bottom: 20px;
}

input[type="text"] {
    width: 70%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: var(--input-bg, rgba(255, 255, 255, 0.7));
    color: var(--input-text-color, #333);
}

button {
    padding: 10px 20px;
    background-color: var(--primary-glow);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: var(--secondary-glow);
}

.content-area {
    height: 500px;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
}

iframe {
    width: 100%;
    height: 100%;
    border: none;
    background-color: white;
}

.light {
    --background: #ecf0f1;
    --text-color: #2c3e50;
}
edit filepath: public/themes/default.css
content: :root {
    --primary-glow: #00bcd4;
    --secondary-glow: #e91e63;
    --background: #2c3e50;
    --text-color: #ecf0f1;
    --container-bg: rgba(255, 255, 255, 0.1);
    --input-bg: rgba(255, 255, 255, 0.7);
    --input-text-color: #333;
    --theme-button-bg: linear-gradient(45deg, var(--primary-glow), var(--secondary-glow));
    --theme-button-border: rgba(255, 255, 255, 0.1);
    --theme-button-color: white;
    --dropdown-bg: rgba(0, 0, 0, 0.7);
    --dropdown-border: rgba(255, 255, 255, 0.1);
    --theme-item-color: white;
    --theme-item-hover-bg: rgba(255, 255, 255, 0.1);
    --theme-preview-border: rgba(255, 255, 255, 0.2);
}
edit filepath: public/themes/dark.css
content: :root {
    --primary-glow: #4CAF50;
    --secondary-glow: #FF9800;
    --background: #34495e;
    --text-color: #bdc3c7;
    --container-bg: rgba(0, 0, 0, 0.5);
    --input-bg: rgba(0, 0, 0, 0.7);
    --input-text-color: #eee;
    --theme-button-bg: linear-gradient(45deg, var(--primary-glow), var(--secondary-glow));
    --theme-button-border: rgba(255, 255, 255, 0.1);
    --theme-button-color: white;
    --dropdown-bg: rgba(0, 0, 0, 0.7);
    --dropdown-border: rgba(255, 255, 255, 0.1);
    --theme-item-color: white;
    --theme-item-hover-bg: rgba(255, 255, 255, 0.1);
    --theme-preview-border: rgba(255, 255, 255, 0.2);
}
edit filepath: public/themes/light.css
content: :root {
    --primary-glow: #39add1;
    --secondary-glow: #e1523d;
    --background: #ecf0f1;
    --text-color: #2c3e50;
    --container-bg: rgba(255, 255, 255, 0.8);
    --input-bg: rgba(255, 255, 255, 0.9);
    --input-text-color: #444;
    --theme-button-bg: linear-gradient(45deg, var(--primary-glow), var(--secondary-glow));
    --theme-button-border: rgba(0, 0, 0, 0.1);
    --theme-button-color: black;
    --dropdown-bg: rgba(255, 255, 255, 0.8);
    --dropdown-border: rgba(0, 0, 0, 0.1);
    --theme-item-color: black;
    --theme-item-hover-bg: rgba(0, 0, 0, 0.1);
    --theme-preview-border: rgba(0, 0, 0, 0.2);
}
edit filepath: api/cache.js
content: const cache = {};

module.exports = {
    get: (key) => {
        return cache[key] || null;
    },
    set: (key, value) => {
        cache[key] = value;
    }
};
edit filepath: api/proxy.js
content: const { URL } = require('url');
const http = require('http');
const https = require('https');
const cache = require('./cache');

module.exports = (req, res) => {
    const targetUrl = req.query.url;
    const cacheKey = `proxy:${targetUrl}`;

    if (!targetUrl) {
        res.status(400).send('URL parameter is required');
        return;
    }

    try {
        new URL(targetUrl);
    } catch (error) {
        res.status(400).send('Invalid URL');
        return;
    }

    const cachedResponse = cache.get(cacheKey);
    if (cachedResponse) {
        console.log('Serving from cache:', targetUrl);
        res.writeHead(cachedResponse.status, cachedResponse.headers);
        res.end(cachedResponse.data);
        return;
    }

    const proxyRequest = (url, responseStream) => {
        const options = {
            url: url,
            headers: {
                'User-Agent': 'Mozilla/5.0 (compatible; MyWebProxy/1.0)'
            }
        };

        const protocol = url.startsWith('https') ? https : http;

        protocol.get(url, options, (proxyRes) => {
            const chunks = [];

            proxyRes.on('data', (chunk) => {
                chunks.push(chunk);
            });

            proxyRes.on('end', () => {
                const data = Buffer.concat(chunks);
                const responseData = {
                    status: proxyRes.statusCode,
                    headers: proxyRes.headers,
                    data: data
                };
                cache.set(cacheKey, responseData);

                responseStream.writeHead(proxyRes.statusCode, proxyRes.headers);
                responseStream.end(data);
            });

            proxyRes.on('error', (err) => {
                console.error('Proxy response error:', err);
                responseStream.status(500).send('Proxy response error');
            });
        }).on('error', (err) => {
            console.error('Proxy request error:', err);
            responseStream.status(500).send('Proxy request error');
        });
    };

    console.log('Proxying:', targetUrl);
    proxyRequest(targetUrl, res);
};
edit filepath: package.json
content: {
  "name": "web-proxy",
  "version": "1.0.0",
  "description": "A simple web proxy",
  "main": "index.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "http-proxy": "^1.18.1",
    "express": "^4.17.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.12"
  }
}
edit filepath: server.js
content: const express = require('express');
const app = express();
const path = require('path');
const proxyHandler = require('./api/proxy');

const port = 3000;

app.use(express.static(path.join(__dirname, 'public')));

app.get('/api/proxy', (req, res) => {
    proxyHandler(req, res);
});

app.listen(port, () => {
    console.log(`Server listening at http://localhost:${port}`);
});