#themeSelector {
    position: fixed;
    top: 60px;
    right: 16px;
    background: linear-gradient(45deg, var(--primary-glow), var(--secondary-glow));
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
    padding: 8px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

#themeSelector:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 15px var(--primary-glow), 0 4px 8px rgba(0, 0, 0, 0.3);
}

.theme-dropdown {
    position: fixed;
    top: 100px;
    right: 16px;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    display: none;
    z-index: 1000;
    width: 180px;
}

.theme-dropdown.active {
    display: block;
}

.theme-item {
    display: flex;
    align-items: center;
    padding: 8px;
    border-radius: 4px;
    cursor: pointer;
    color: white;
    transition: all 0.3s ease;
    margin-bottom: 4px;
}

.theme-item:last-child {
    margin-bottom: 0;
}

.theme-item:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
    box-shadow: 0 0 10px var(--primary-glow), 0 2px 4px rgba(0, 0, 0, 0.2);
}

.theme-preview {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 8px;
    border: 2px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
}

.theme-preview:hover {
    border-color: var(--primary-glow);
    box-shadow: 0 0 5px var(--primary-glow);
}

.light #themeSelector {
    background: linear-gradient(45deg, var(--primary-glow), var(--secondary-glow));
    border: 1px solid rgba(0, 0, 0, 0.1);
    color: black;
}

.light .theme-dropdown {
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.1);
    color: black;
}

.light .theme-item {
    color: black;
}

.light .theme-item:hover {
    background: rgba(0, 0, 0, 0.1);
}

.light .theme-preview {
    border-color: rgba(0, 0, 0, 0.2);
}

.light .theme-preview:hover {
    border-color: var(--primary-glow);
}
edit filepath: public/index.html
content: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Proxy</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="visuals/dropdown.css">
    <link id="theme-link" rel="stylesheet" href="themes/default.css">
    <link rel="icon" href="visuals/favicon.ico" type="image/x-icon">
</head>
<body>
    <div class="container">
        <h1>Web Proxy</h1>
        <div class="input-area">
            <input type="text" id="urlInput" placeholder="Enter URL">
            <button id="proxyButton">Go</button>
        </div>
        <div class="content-area">
            <iframe id="proxyFrame" src=""></iframe>
        </div>
    </div>

    <button id="themeSelector">
        <img src="visuals/theme-icon.svg" alt="Theme" width="24">
    </button>

    <div class="theme-dropdown">
        <div class="theme-item" data-theme="default">
            <span class="theme-preview" style="background-color: #2980b9;"></span> Default
        </div>
        <div class="theme-item" data-theme="dark">
            <span class="theme-preview" style="background-color: #34495e;"></span> Dark
        </div>
        <div class="theme-item" data-theme="light">
            <span class="theme-preview" style="background-color: #ecf0f1;"></span> Light
        </div>
    </div>

    <script src="script.js"></script>
    <script src="visuals/dropdown.js"></script>
</body>
</html>
edit filepath: public/script.js
content: document.addEventListener('DOMContentLoaded', function() {
    const urlInput = document.getElementById('urlInput');
    const proxyButton = document.getElementById('proxyButton');
    const proxyFrame = document.getElementById('proxyFrame');

    proxyButton.addEventListener('click', function() {
        let url = urlInput.value;
        if (url) {
            proxyFrame.src = '/api/proxy?url=' + encodeURIComponent(url);
        }
    });
});
edit filepath: api/proxy.js
content: const { URL } = require('url');
const http = require('http');
const https = require('https');

module.exports = (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        res.status(400).send('URL parameter is required');
        return;
    }

    try {
        new URL(targetUrl);
    } catch (error) {
        res.status(400).send('Invalid URL');
        return;
    }

    const proxyRequest = (url, responseStream) => {
        const options = {
            url: url,
            headers: {
                'User-Agent': 'Mozilla/5.0 (compatible; MyWebProxy/1.0)'
            }
        };

        const protocol = url.startsWith('https') ? https : http;

        protocol.get(url, options, (proxyRes) => {
            responseStream.writeHead(proxyRes.statusCode, proxyRes.headers);
            proxyRes.pipe(responseStream, { end: true });

            proxyRes.on('error', (err) => {
                console.error('Proxy response error:', err);
                responseStream.status(500).send('Proxy response error');
            });
        }).on('error', (err) => {
            console.error('Proxy request error:', err);
            responseStream.status(500).send('Proxy request error');
        });
    };

    proxyRequest(targetUrl, res);
};
edit filepath: package.json
content: {
  "name": "web-proxy",
  "version": "1.0.0",
  "description": "A simple web proxy",
  "main": "index.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "http-proxy": "^1.18.1",
    "express": "^4.17.1"
  }
}
edit filepath: server.js
content: const express = require('express');
const app = express();
const path = require('path');

const proxyHandler = require('./api/proxy');

const port = 3000;

app.use(express.static(path.join(__dirname, 'public')));

app.get('/api/proxy', (req, res) => {
    proxyHandler(req, res);
});

app.listen(port, () => {
    console.log(`Server listening at http://localhost:${port}`);
});
edit filepath: public/style.css
content: body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: var(--background);
    color: var(--text-color);
    transition: background 0.3s ease, color 0.3s ease;
}

:root {
    --primary-glow: #00bcd4;
    --secondary-glow: #e91e63;
    --background: #2c3e50;
    --text-color: #ecf0f1;
}

.container {
    width: 80%;
    max-width: 1200px;
    padding: 20px;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
}

h1 {
    color: var(--text-color);
    margin-bottom: 20px;
}

.input-area {
    margin-bottom: 20px;
}

input[type="text"] {
    width: 70%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: rgba(255, 255, 255, 0.7);
    color: #333;
}

button {
    padding: 10px 20px;
    background-color: var(--primary-glow);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: var(--secondary-glow);
}

.content-area {
    height: 500px;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
}

iframe {
    width: 100%;
    height: 100%;
    border: none;
    background-color: white;
}

.light {
    --background: #ecf0f1;
    --text-color: #2c3e50;
}
edit filepath: public/visuals/theme-icon.svg
content: <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"/><path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/></svg>
edit filepath: public/visuals/dropdown.js
content: document.addEventListener('DOMContentLoaded', function() {
    const themeSelector = document.getElementById('themeSelector');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const themeItems = document.querySelectorAll('.theme-item');
    const themeLink = document.getElementById('theme-link');

    themeSelector.addEventListener('click', function() {
        themeDropdown.classList.toggle('active');
    });

    themeItems.forEach(item => {
        item.addEventListener('click', function() {
            const theme = this.dataset.theme;
            themeLink.href = `themes/${theme}.css`;
            localStorage.setItem('selectedTheme', theme);
            themeDropdown.classList.remove('active');
        });
    });

    document.addEventListener('click', function(event) {
        if (!themeSelector.contains(event.target) && !themeDropdown.contains(event.target)) {
            themeDropdown.classList.remove('active');
        }
    });

    const selectedTheme = localStorage.getItem('selectedTheme') || 'default';
    themeLink.href = `themes/${selectedTheme}.css`;
});
edit filepath: public/themes/default.css
content: :root {
    --primary-glow: #00bcd4;
    --secondary-glow: #e91e63;
    --background: #2c3e50;
    --text-color: #ecf0f1;
}
edit filepath: public/themes/dark.css
content: :root {
    --primary-glow: #4CAF50;
    --secondary-glow: #FF9800;
    --background: #34495e;
    --text-color: #bdc3c7;
}
edit filepath: public/themes/light.css
content: :root {
    --primary-glow: #39add1;
    --secondary-glow: #e1523d;
    --background: #ecf0f1;
    --text-color: #2c3e50;
}
edit filepath: .gitignore
content: node_modules/
edit filepath: api/headers.js
content: module.exports = (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        res.status(400).send('URL parameter is required');
        return;
    }

    const https = require('https');

    https.get(targetUrl, (proxyRes) => {
        res.status(200).json(proxyRes.headers);
    }).on('error', (err) => {
        console.error('Error fetching headers:', err);
        res.status(500).send('Error fetching headers');
    });
};