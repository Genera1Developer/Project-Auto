.category-selector {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.category-button {
    background-color: #333;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 0 5px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.category-button:hover {
    background-color: #555;
}

.category-button.active {
    background-color: #4CAF50;
}

.game-card {
    background-color: #1a1a1a;
    border: 1px solid #333;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    transition: transform 0.2s, box-shadow 0.2s;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
}

.game-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.7);
}

.game-card img {
    width: 100%;
    border-radius: 5px;
    margin-bottom: 10px;
}

.game-card h3 {
    margin-bottom: 5px;
    color: white;
}

.game-card p {
    color: #ccc;
    font-size: 0.9em;
}

.game-card a {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border-radius: 5px;
    text-decoration: none;
    text-align: center;
    display: block;
    transition: background-color 0.3s;
}

.game-card a:hover {
    background-color: #45a049;
}

edit filepath: public/games.js
content: document.addEventListener('DOMContentLoaded', function() {
    const games = [
        {
            name: "Awesome Game 1",
            category: "action",
            imageUrl: "/Games/game1.jpg",
            url: "https://example.com/game1",
            description: "A thrilling action game."
        },
        {
            name: "Sports Mania 2024",
            category: "sports",
            imageUrl: "/Games/game2.jpg",
            url: "https://example.com/game2",
            description: "The ultimate sports game."
        },
		{
            name: "Puzzle Master 3D",
            category: "puzzle",
            imageUrl: "/Games/game1.jpg",
            url: "https://example.com/game3",
            description: "Test your brain with this puzzle."
        },
		{
            name: "Action Heroes",
            category: "action",
            imageUrl: "/Games/game2.jpg",
            url: "https://example.com/game4",
            description: "A lot of action!"
        },
		{
            name: "Run and Score!",
            category: "sports",
            imageUrl: "/Games/game1.jpg",
            url: "https://example.com/game5",
            description: "The most competetive sports game!"
        },
		{
            name: "Puzzler",
            category: "puzzle",
            imageUrl: "/Games/game2.jpg",
            url: "https://example.com/game6",
            description: "A puzzling experience!"
        }
    ];

    const gamesGrid = document.getElementById('games-grid');
    const searchInput = document.getElementById('search-input');
    const categoryButtons = document.querySelectorAll('.category-button');

    function displayGames(gamesToDisplay) {
        gamesGrid.innerHTML = '';
        gamesToDisplay.forEach(game => {
            const gameCard = document.createElement('div');
            gameCard.classList.add('game-card');
            gameCard.setAttribute('data-category', game.category);

            gameCard.innerHTML = `
                <img src="${game.imageUrl}" alt="${game.name}">
                <h3>${game.name}</h3>
                <p>${game.description}</p>
                <a href="${game.url}" target="_blank">Play Now</a>
            `;
            gamesGrid.appendChild(gameCard);
        });
    }

    function filterGames(category) {
        const filteredGames = category === 'all' ? games : games.filter(game => game.category === category);
        displayGames(filteredGames);
    }

    function searchGames(searchTerm) {
        const searchedGames = games.filter(game => game.name.toLowerCase().includes(searchTerm.toLowerCase()));
        displayGames(searchedGames);
    }

    displayGames(games);

    categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
            categoryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            filterGames(this.getAttribute('data-category'));
        });
    });

    searchInput.addEventListener('input', function() {
        searchGames(this.value);
    });

    document.getElementById('search-button').addEventListener('click', function() {
        searchGames(searchInput.value);
    });
});

edit filepath: api/route.js
content: // api/route.js
export async function GET(request) {
    return new Response('Hello, Next.js!');
}

edit filepath: api/hello.js
content: // api/hello.js
export default function handler(req, res) {
    res.status(200).json({ text: 'Hello' });
}

edit filepath: api/proxy.js
content: // api/proxy.js
import { request } from 'undici';

export default async function handler(req, res) {
    const { url } = req.query;

    if (!url) {
        return res.status(400).json({ error: 'URL parameter is required' });
    }

    try {
        const { statusCode, headers, body } = await request(url, {
            headers: {
                'user-agent': req.headers['user-agent'] || 'Mozilla/5.0 (compatible; YourProxy/1.0)'
            },
            maxRedirections: 10,
        });

        res.status(statusCode);

        for (const header in headers) {
            if (header !== 'content-encoding') {
                res.setHeader(header, headers[header]);
            }
        }

        const buffer = await body.arrayBuffer();
        res.send(Buffer.from(buffer));

    } catch (error) {
        console.error('Proxy error:', error);
        res.status(500).json({ error: 'Proxy request failed', details: error.message });
    }
}

edit filepath: uv/uv.config.js
content: self.__uv$config = {
    prefix: '/service/',
    bare: '/bare/',
    encodeUrl: Ultraviolet.codec.xor.encode,
    decodeUrl: Ultraviolet.codec.xor.decode,
    handler: '/uv/uv.handler.js',
    bundle: '/uv/uv.bundle.js',
    config: '/uv/uv.config.js',
    sw: '/uv/uv.sw.js',
};

edit filepath: public/script.js
content: document.addEventListener('DOMContentLoaded', function() {
    const html = document.documentElement;
    const themeToggle = document.getElementById('themeToggle');
    const themeSelector = document.getElementById('themeSelector');
    const themeDropdown = document.getElementById('themeDropdown');

    if (themeToggle) {
        themeToggle.addEventListener('click', () => {
            html.classList.toggle('light');
            localStorage.setItem('theme', html.classList.contains('light') ? 'light' : 'dark');
        });
    }

    if (localStorage.getItem('theme') === 'light') {
        html.classList.add('light');
    }

    if (themeSelector) {
        themeSelector.addEventListener('click', () => {
            themeDropdown.classList.toggle('active');
        });
    }

    document.querySelectorAll('.theme-item').forEach(item => {
        item.addEventListener('click', () => {
            const selectedTheme = item.getAttribute('data-theme');
            html.setAttribute('data-theme', selectedTheme);
            localStorage.setItem('theme', selectedTheme);
            themeDropdown.classList.remove('active');
        });
    });

    const savedTheme = localStorage.getItem('theme') || 'default';
    html.setAttribute('data-theme', savedTheme);
});