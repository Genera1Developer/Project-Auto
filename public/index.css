body {
    font-family: 'Arial', sans-serif;
    background-color: #000; /* Dark background for encryption theme */
    color: #00ff00; /* Green text for a "hacker" look */
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden; /* Hide scrollbars */
}

.container {
    background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent container */
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 255, 0, 0.3); /* Glowing shadow */
    text-align: center;
    width: 80%;
    max-width: 600px;
    border: 1px solid #00ff00; /* Green border */
}

h1 {
    color: #00ff00;
    text-shadow: 0 0 5px #00ff00; /* Glowing text */
}

#urlInput {
    width: calc(100% - 20px);
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #00ff00; /* Green border */
    border-radius: 4px;
    background-color: #111;
    color: #00ff00;
}

#proxyButton {
    padding: 10px 20px;
    background-color: #00ff00;
    color: #000;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#proxyButton:hover {
    background-color: #00cc00;
}

#content {
    margin-top: 20px;
    text-align: left;
    border: 1px solid #00ff00; /* Green border */
    padding: 10px;
    border-radius: 4px;
    background-color: #111;
    color: #00ff00;
    overflow-wrap: break-word; /* Prevent overflow */
}

.error {
    color: #ff0000; /* Red error messages */
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        width: 95%;
    }

    #urlInput {
        width: calc(100% - 10px);
    }
}

/* Particle effect styles */
#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: -1;
}
edit filepath: public/index.html
content: <!DOCTYPE html>
<html>
<head>
    <title>Encrypted Web Proxy</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <div id="particles-js"></div>
    <div class="container">
        <h1>Encrypted Web Proxy</h1>
        <input type="text" id="urlInput" placeholder="Enter URL">
        <button id="proxyButton">Go</button>
        <div id="content"></div>
    </div>
    <script src="particles.js"></script>
    <script>
        particlesJS.load('particles-js', 'particles.json', function() {
            console.log('particles.json loaded - Encryption Theme Engaged');
        });
    </script>
    <script src="script.js"></script>
</body>
</html>
edit filepath: public/particles.json
content: {
  "particles": {
    "number": {
      "value": 80,
      "density": {
        "enable": true,
        "value_area": 800
      }
    },
    "color": {
      "value": "#00ff00"
    },
    "shape": {
      "type": "circle",
      "stroke": {
        "width": 0,
        "color": "#000000"
      },
      "polygon": {
        "nb_sides": 5
      },
      "image": {
        "src": "img/github.svg",
        "width": 100,
        "height": 100
      }
    },
    "opacity": {
      "value": 0.7,
      "random": true,
      "anim": {
        "enable": true,
        "speed": 1,
        "opacity_min": 0.1,
        "sync": false
      }
    },
    "size": {
      "value": 3,
      "random": true,
      "anim": {
        "enable": false,
        "speed": 40,
        "size_min": 0.1,
        "sync": false
      }
    },
    "line_linked": {
      "enable": true,
      "distance": 150,
      "color": "#00ff00",
      "opacity": 0.4,
      "width": 1
    },
    "move": {
      "enable": true,
      "speed": 3,
      "direction": "none",
      "random": true,
      "straight": false,
      "out_mode": "out",
      "bounce": false,
      "attract": {
        "enable": false,
        "rotateX": 600,
        "rotateY": 1200
      }
    }
  },
  "interactivity": {
    "detect_on": "canvas",
    "events": {
      "onhover": {
        "enable": true,
        "mode": "grab"
      },
      "onclick": {
        "enable": true,
        "mode": "push"
      },
      "resize": true
    },
    "modes": {
      "grab": {
        "distance": 140,
        "line_linked": {
          "opacity": 1
        }
      },
      "bubble": {
        "distance": 400,
        "size": 40,
        "duration": 2,
        "opacity": 8,
        "speed": 3
      },
      "repulse": {
        "distance": 200,
        "duration": 0.4
      },
      "push": {
        "particles_nb": 4
      },
      "remove": {
        "particles_nb": 2
      }
    }
  },
  "retina_detect": true
}
edit filepath: public/particles.js
content: /* -----------------------------------------------
/* Author : Vincent Garreau  - vincentgarreau.com
/* Demo    : Dynamic particles.js background
/* ----------------------------------------------- */

var canvas, ctx, w, h, particles = [], probability = 0.045,
    xPoint, yPoint;

//console.log(document.getElementById('particles-js'));
//alert("hello");

window.onload = function() {
  canvas = document.getElementById("particles-js");
  ctx = canvas.getContext("2d");
  w = canvas.width = window.innerWidth;
  h = canvas.height = window.innerHeight;

  xPoint = canvas.width / 2;
  yPoint = canvas.height / 2;

  if(document.getElementById('particles-js') != null) {
        setInterval(function() {
          ctx.clearRect(0, 0, w, h);
          createParticles();
          drawParticles();
        }, 30);
  }
}

function createParticles() {
  for (var i = 0; i < 5; i++) {
    var particle = {
      x: Math.random() * w,
      y: Math.random() * h,
      alpha: 0,
      color: 'rgb(0,255,0)',
      radius: Math.random() * 20,
      vx: -5 + Math.random() * 10,
      vy: -5 + Math.random() * 10
    }
    particles.push(particle);
  }
}

function drawParticles() {
  for (var i = 0; i < particles.length; i++) {
    var particle = particles[i];
    ctx.beginPath();
    ctx.fillStyle = particle.color;
    ctx.globalAlpha = particle.alpha;
    ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2, false);
    ctx.closePath();
    ctx.fill();
    particle.alpha += 0.01;
    particle.x += particle.vx;
    particle.y += particle.vy;
    if (particle.alpha > 1) {
      particle.alpha = 0;
    }
    if (particle.x > w + 50 || particle.x < -50 || particle.y > h + 50 || particle.y < -50) {
      particle.x = Math.random() * w;
      particle.y = Math.random() * h;
    }
  }
}