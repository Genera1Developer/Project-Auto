body {
    margin: 0;
    font-family: sans-serif;
    background-color: #000;
    color: #fff;
    overflow: hidden; /* Hide scrollbars */
}

#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
}

.container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 1;
}

h1 {
    font-size: 3em;
    margin-bottom: 20px;
    color: #00c698; /* Encryption-themed color */
}

input[type="text"] {
    padding: 10px;
    width: 300px;
    border: none;
    border-radius: 5px;
    margin-bottom: 20px;
    background-color: #222;
    color: #fff;
}

button {
    padding: 10px 20px;
    background-color: #00c698; /* Encryption-themed color */
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #00a37d;
}

/* Style for displaying encryption key */
#encryptionKeyDisplay {
    margin-top: 20px;
    font-size: 0.8em;
    color: #aaa;
    word-wrap: break-word;
}

/* Animate the encryption key display */
@keyframes fadeIn {
    from {opacity: 0;}
    to {opacity: 1;}
}

#encryptionKeyDisplay {
    animation: fadeIn 2s;
}
edit filepath: public/script.js
content: document.addEventListener('DOMContentLoaded', function() {
    const proxyForm = document.getElementById('proxyForm');
    const urlInput = document.getElementById('urlInput');
    const encryptionKeyDisplay = document.getElementById('encryptionKeyDisplay'); // Get the display element

    function generateAndDisplayKey() {
        const key = generateEncryptionKey();
        encryptionKeyDisplay.textContent = 'Encryption Key: ' + key; // Update the text
    }
  
      // Function to generate a random encryption key
    function generateEncryptionKey() {
        const keyLength = 16; // You can adjust the key length as needed
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let key = '';
        for (let i = 0; i < keyLength; i++) {
            key += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return key;
    }


    proxyForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const url = urlInput.value;
        const key = generateEncryptionKey(); //Generate a new key on submission
        const encodedUrl = btoa(url); // Basic encoding

        // Store the key in localStorage
        localStorage.setItem('encryptionKey', key);

        window.location.href = '/uv/service/' + encodedUrl;
    });

    generateAndDisplayKey(); // Generate and display key on page load
});