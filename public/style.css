body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 80%;
    max-width: 800px;
}

h1 {
    text-align: center;
    color: #333;
}

.input-area {
    display: flex;
    margin-bottom: 20px;
}

.input-area input {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    flex-grow: 1;
    margin-right: 10px;
}

.input-area button {
    padding: 10px 15px;
    border: none;
    background-color: #5cb85c;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.input-area button:hover {
    background-color: #4cae4c;
}

.content-area {
    height: 400px;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
}

.content-area iframe {
    width: 100%;
    height: 100%;
    border: none;
}

#headersDisplay {
    margin-top: 20px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #f9f9f9;
}

#headersDisplay h2 {
    margin-top: 0;
    color: #333;
}

#headersContent {
    white-space: pre-wrap;
    word-break: break-all;
    font-family: monospace;
    color: #555;
}

#themeSelector {
    position: fixed;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    cursor: pointer;
}

.theme-dropdown {
    position: absolute;
    top: 60px;
    right: 20px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    display: none;
    z-index: 1000;
}

.theme-dropdown.show {
    display: block;
}

.theme-item {
    padding: 10px 15px;
    cursor: pointer;
    display: flex;
    align-items: center;
}

.theme-item:hover {
    background-color: #f0f0f0;
}

.theme-preview {
    display: inline-block;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    margin-right: 10px;
}

#loadingIndicator {
    text-align: center;
    margin-top: 20px;
    display: none;
}
edit filepath: public/script.js
content: document.addEventListener('DOMContentLoaded', function() {
    const urlInput = document.getElementById('urlInput');
    const proxyButton = document.getElementById('proxyButton');
    const headersButton = document.getElementById('headersButton');
    const proxyFrame = document.getElementById('proxyFrame');
    const headersDisplay = document.getElementById('headersDisplay');
    const headersContent = document.getElementById('headersContent');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const themeSelector = document.getElementById('themeSelector');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const themeItems = document.querySelectorAll('.theme-item');
    const themeLink = document.getElementById('theme-link');

    proxyButton.addEventListener('click', function() {
        const url = urlInput.value;
        if (url) {
            showLoading();
            proxyFrame.src = '/api/proxy?url=' + encodeURIComponent(url);
            headersDisplay.style.display = 'none';
        } else {
            alert('Please enter a URL.');
        }
    });

    headersButton.addEventListener('click', function() {
        const url = urlInput.value;
        if (url) {
            showLoading();
            fetch('/api/headers?url=' + encodeURIComponent(url))
                .then(response => response.json())
                .then(data => {
                    headersContent.textContent = JSON.stringify(data, null, 2);
                    headersDisplay.style.display = 'block';
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error fetching headers:', error);
                    headersContent.textContent = 'Error fetching headers.';
                    headersDisplay.style.display = 'block';
                    hideLoading();
                });
        } else {
            alert('Please enter a URL.');
        }
    });

    proxyFrame.onload = function() {
        hideLoading();
    };

    proxyFrame.onerror = function() {
        hideLoading();
        alert('Failed to load the URL in the iframe.');
    };

    function showLoading() {
        loadingIndicator.style.display = 'block';
    }

    function hideLoading() {
        loadingIndicator.style.display = 'none';
    }

    themeSelector.addEventListener('click', function() {
        themeDropdown.classList.toggle('show');
    });

    themeItems.forEach(item => {
        item.addEventListener('click', function() {
            const theme = this.dataset.theme;
            themeLink.href = `themes/${theme}.css`;
            themeDropdown.classList.remove('show');
        });
    });

    window.addEventListener('click', function(event) {
        if (!event.target.matches('#themeSelector')) {
            if (themeDropdown.classList.contains('show')) {
                themeDropdown.classList.remove('show');
            }
        }
    });
});
edit filepath: api/proxy.js
content: const { URL } = require('url');
const fetch = require('node-fetch');

module.exports = async (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        return res.status(400).send('URL parameter is required');
    }

    try {
        new URL(targetUrl);
    } catch (error) {
        return res.status(400).send('Invalid URL');
    }

    try {
        const response = await fetch(targetUrl, {
            headers: req.headers,
            method: req.method,
            redirect: 'manual'
        });

        res.status(response.status);

        for (const [key, value] of response.headers.entries()) {
            if (key.toLowerCase() === 'content-security-policy') continue;
            res.setHeader(key, value);
        }

        if (response.status >= 300 && response.status < 400) {
            const redirectUrl = response.headers.get('location');
            if (redirectUrl) {
                res.setHeader('location', `/api/proxy?url=${redirectUrl}`);
            }
        }

        const body = await response.buffer();
        res.send(body);
    } catch (error) {
        console.error('Proxy error:', error);
        res.status(500).send(`Proxy error: ${error.message}`);
    }
};
edit filepath: api/headers.js
content: const fetch = require('node-fetch');
const { URL } = require('url');

module.exports = async (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        return res.status(400).send('URL parameter is required');
    }

     try {
        new URL(targetUrl);
    } catch (error) {
        return res.status(400).send('Invalid URL');
    }

    try {
        const response = await fetch(targetUrl, {
            method: 'HEAD'
        });

        const headers = {};
        for (const [key, value] of response.headers.entries()) {
            headers[key] = value;
        }

        res.status(200).json(headers);
    } catch (error) {
        console.error('Error fetching headers:', error);
        res.status(500).send(`Error fetching headers: ${error.message}`);
    }
};
edit filepath: server.js
content: const express = require('express');
const proxy = require('./api/proxy');
const headers = require('./api/headers');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.static('public'));

app.get('/api/proxy', proxy);
app.get('/api/headers', headers);

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
edit filepath: public/themes/default.css
content: body {
    background-color: #f4f4f4;
    color: #333;
}

.container {
    background-color: #fff;
}

.input-area input {
    border: 1px solid #ddd;
}
edit filepath: public/themes/dark.css
content: body {
    background-color: #34495e;
    color: #ecf0f1;
}

.container {
    background-color: #2c3e50;
}

.input-area input {
    border: 1px solid #7f8c8d;
    background-color: #2c3e50;
    color: #ecf0f1;
}
edit filepath: public/themes/light.css
content: body {
    background-color: #ecf0f1;
    color: #2c3e50;
}

.container {
    background-color: #f9f9f9;
}

.input-area input {
    border: 1px solid #bdc3c7;
}
edit filepath: package.json
content: {
  "name": "web-proxy",
  "version": "1.0.0",
  "description": "A simple web proxy",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "node-fetch": "^2.6.1"
  }
}
edit filepath: .gitignore
content: node_modules/
edit filepath: README.md
content: # Web Proxy

A simple web proxy built with Node.js and Express.
edit filepath: public/visuals/dropdown.js
content: document.addEventListener('DOMContentLoaded', function() {
    const themeSelector = document.getElementById('themeSelector');
    const themeDropdown = document.querySelector('.theme-dropdown');

    themeSelector.addEventListener('click', function() {
        themeDropdown.classList.toggle('show');
    });

    window.addEventListener('click', function(event) {
        if (!event.target.matches('#themeSelector')) {
            if (themeDropdown.classList.contains('show')) {
                themeDropdown.classList.remove('show');
            }
        }
    });
});