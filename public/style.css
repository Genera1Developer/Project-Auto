body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.container {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: 80%;
    max-width: 800px;
    text-align: center;
}

h1 {
    color: #333;
}

.input-area {
    margin-bottom: 20px;
}

input[type="text"] {
    padding: 10px;
    width: 70%;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
}

button {
    padding: 10px 20px;
    background-color: #2980b9;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #3498db;
}

.content-area {
    position: relative;
}

#proxyFrame {
    width: 100%;
    height: 500px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.info-area {
    margin-top: 20px;
}

#headersDisplay {
    white-space: pre-wrap;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 4px;
    text-align: left;
}

#themeSelector {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: transparent;
    border: none;
    cursor: pointer;
}

.theme-dropdown {
    position: absolute;
    top: 50px;
    right: 20px;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    overflow: hidden;
    z-index: 10;
}

.theme-dropdown.show {
    display: flex;
}

.theme-item {
    padding: 10px 15px;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.2s;
}

.theme-item:hover {
    background-color: #f0f0f0;
}

.theme-preview {
    display: inline-block;
    width: 20px;
    height: 20px;
    border-radius: 4px;
    margin-right: 10px;
}
edit filepath: public/script.js
content: document.addEventListener('DOMContentLoaded', function() {
    const urlInput = document.getElementById('urlInput');
    const proxyButton = document.getElementById('proxyButton');
    const proxyFrame = document.getElementById('proxyFrame');
    const headersButton = document.getElementById('headersButton');
    const headersDisplay = document.getElementById('headersDisplay');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const themeSelector = document.getElementById('themeSelector');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const themeItems = document.querySelectorAll('.theme-item');
    const themeLink = document.getElementById('theme-link');

    proxyButton.addEventListener('click', function() {
        const url = urlInput.value;
        if (url) {
            showLoading();
            proxyFrame.src = '/api/proxy?url=' + encodeURIComponent(url);
            proxyFrame.onload = hideLoading;
            proxyFrame.onerror = hideLoading;
        }
    });

    headersButton.addEventListener('click', function() {
        if (headersDisplay.style.display === 'none') {
            showHeaders();
        } else {
            hideHeaders();
        }
    });

    themeSelector.addEventListener('click', function() {
        themeDropdown.classList.toggle('show');
    });

    themeItems.forEach(item => {
        item.addEventListener('click', function() {
            const theme = this.dataset.theme;
            setTheme(theme);
            themeDropdown.classList.remove('show');
        });
    });

    function showLoading() {
        loadingSpinner.style.display = 'block';
        proxyFrame.style.display = 'none';
    }

    function hideLoading() {
        loadingSpinner.style.display = 'none';
        proxyFrame.style.display = 'block';
    }

    function showHeaders() {
        headersDisplay.style.display = 'block';
        // In a real application, you would fetch the headers from the server.
        headersDisplay.textContent = "Fetching headers...";
        fetch('/api/headers')
            .then(response => response.json())
            .then(headers => {
                headersDisplay.textContent = JSON.stringify(headers, null, 2);
            })
            .catch(error => {
                headersDisplay.textContent = "Error fetching headers.";
            });
    }

    function hideHeaders() {
        headersDisplay.style.display = 'none';
    }

    function setTheme(theme) {
        themeLink.href = `themes/${theme}.css`;
        localStorage.setItem('selectedTheme', theme);
    }

    const storedTheme = localStorage.getItem('selectedTheme');
    if (storedTheme) {
        setTheme(storedTheme);
    }

    window.addEventListener('click', function(event) {
        if (!themeSelector.contains(event.target) && !themeDropdown.contains(event.target)) {
            themeDropdown.classList.remove('show');
        }
    });
});
edit filepath: public/visuals/dropdown.css
content: .theme-dropdown {
    position: absolute;
    top: 50px;
    right: 20px;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    overflow: hidden;
    z-index: 10;
}

.theme-dropdown.show {
    display: flex;
}

.theme-item {
    padding: 10px 15px;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.2s;
}

.theme-item:hover {
    background-color: #f0f0f0;
}

.theme-preview {
    display: inline-block;
    width: 20px;
    height: 20px;
    border-radius: 4px;
    margin-right: 10px;
}
edit filepath: public/visuals/loading.css
content: .lds-dual-ring {
    display: inline-block;
    width: 80px;
    height: 80px;
  }
  .lds-dual-ring:after {
    content: " ";
    display: block;
    width: 64px;
    height: 64px;
    margin: 8px;
    border-radius: 50%;
    border: 6px solid #2980b9;
    border-color: #2980b9 transparent #2980b9 transparent;
    animation: lds-dual-ring 1.2s linear infinite;
  }
  @keyframes lds-dual-ring {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
edit filepath: public/themes/default.css
content: body {
    background-color: #f0f0f0;
    color: #333;
}

.container {
    background-color: #fff;
}

h1 {
    color: #2980b9;
}

button {
    background-color: #2980b9;
}
edit filepath: public/themes/dark.css
content: body {
    background-color: #34495e;
    color: #ecf0f1;
}

.container {
    background-color: #2c3e50;
}

h1 {
    color: #3498db;
}

button {
    background-color: #3498db;
}
edit filepath: public/themes/light.css
content: body {
    background-color: #ecf0f1;
    color: #2c3e50;
}

.container {
    background-color: #f9f9f9;
}

h1 {
    color: #3498db;
}

button {
    background-color: #3498db;
}
edit filepath: api/proxy.js
content: const { URL } = require('url');
const https = require('https');
const http = require('http');

module.exports = (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        res.status(400).send('URL parameter is required');
        return;
    }

    try {
        new URL(targetUrl);
    } catch (error) {
        res.status(400).send('Invalid URL');
        return;
    }

    const proxyRequest = (url, responseStream) => {
        const options = {
            method: req.method,
            headers: req.headers
        };

        const protocol = url.startsWith('https') ? https : http;

        const proxy = protocol.request(url, options, (proxyResponse) => {
            responseStream.writeHead(proxyResponse.statusCode, proxyResponse.headers);
            proxyResponse.pipe(responseStream, { end: true });
        }).on('error', (error) => {
            responseStream.status(500).send(`Proxy Error: ${error.message}`);
        });

        req.pipe(proxy, { end: true });
    };

    proxyRequest(targetUrl, res);
};
edit filepath: api/headers.js
content: module.exports = (req, res) => {
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
    };

    res.writeHead(200, headers);
    res.end(JSON.stringify(req.headers));
};
edit filepath: server.js
content: const http = require('http');
const fs = require('fs');
const path = require('path');
const proxy = require('./api/proxy');
const headers = require('./api/headers');

const server = http.createServer((req, res) => {
    if (req.url.startsWith('/api/proxy')) {
        return proxy(req, res);
    }

    if (req.url === '/api/headers') {
        return headers(req, res);
    }

    let filePath = '.' + req.url;
    if (filePath === './') {
        filePath = './public/index.html';
    } else if (!filePath.startsWith('./public/')) {
        filePath = './public' + req.url;
    }

    const extname = String(path.extname(filePath)).toLowerCase();
    const mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.ico': 'image/x-icon'
    };

    const contentType = mimeTypes[extname] || 'application/octet-stream';

    fs.readFile(filePath, (error, content) => {
        if (error) {
            if (error.code === 'ENOENT') {
                fs.readFile('./public/404.html', (error, content) => {
                    res.writeHead(404, { 'Content-Type': 'text/html' });
                    res.end(content, 'utf-8');
                });
            } else {
                res.writeHead(500);
                res.end('Sorry, check with the site admin for error: ' + error.code + ' ..\n');
            }
        } else {
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(content, 'utf-8');
        }
    });

});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
});
edit filepath: public/404.html
content: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 Not Found</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            color: #333;
            text-align: center;
            padding-top: 100px;
        }
        h1 {
            font-size: 3em;
            margin-bottom: 20px;
        }
        p {
            font-size: 1.2em;
            margin-bottom: 30px;
        }
        a {
            color: #007bff;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <h1>404 Not Found</h1>
    <p>Sorry, the page you're looking for could not be found.</p>
    <a href="/">Go back to the homepage</a>
</body>
</html>