body {
    font-family: 'Arial', sans-serif;
    background-color: #e0e0e0;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
    box-sizing: border-box;
}

.container {
    background-color: #ffffff;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 90%;
    max-width: 900px;
}

h1 {
    color: #2d3748;
    margin-bottom: 20px;
    font-size: 2.5em;
}

.input-area {
    display: flex;
    justify-content: center;
    align-items: stretch;
    margin-bottom: 20px;
}

input[type="text"] {
    padding: 12px 16px;
    border: 1px solid #cbd5e0;
    border-radius: 6px;
    width: 75%;
    margin-right: 10px;
    font-size: 1em;
    color: #4a5568;
    transition: border-color 0.2s;
}

input[type="text"]:focus {
    outline: none;
    border-color: #63b3ed;
    box-shadow: 0 0 0 2px rgba(99, 179, 237, 0.2);
}

button {
    padding: 12px 24px;
    background-color: #48bb78;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #38a169;
}

button:active {
    background-color: #2f855a;
}

.content-area {
    margin-top: 30px;
}

#proxyFrame {
    width: 100%;
    height: 500px;
    border: none;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.info-area {
    margin-top: 30px;
}

#headersDisplay {
    white-space: pre-wrap;
    background-color: #edf2f7;
    padding: 15px;
    border: 1px solid #cbd5e0;
    border-radius: 6px;
    text-align: left;
    font-family: monospace;
    font-size: 0.9em;
    color: #4a5568;
    overflow-x: auto;
}
#loadingSpinner {
    display: none;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
}

.spinner {
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 2s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
@media (max-width: 768px) {
    .input-area {
        flex-direction: column;
    }

    input[type="text"] {
        width: 100%;
        margin-bottom: 10px;
        margin-right: 0;
    }
}
#themeSelector {
    position: fixed;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px;
    border-radius: 50%;
    transition: background-color 0.3s;
}

#themeSelector:hover {
    background-color: rgba(0, 0, 0, 0.1);
}

.theme-dropdown {
    position: absolute;
    top: 60px;
    right: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    overflow: hidden;
    z-index: 10;
    width: 150px;
}

.theme-dropdown.show {
    display: flex;
}

.theme-item {
    padding: 12px 15px;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 0.9em;
    color: #333;
}

.theme-item:hover {
    background-color: #f0f0f0;
}

.theme-preview {
    display: inline-block;
    width: 20px;
    height: 20px;
    border-radius: 4px;
    margin-right: 10px;
    border: 1px solid #ddd;
}
#urlInput {
    width: 70%;
    margin-right: 10px;
}
footer {
    text-align: center;
    margin-top: 30px;
    padding: 20px;
    background-color: #f7f7f7;
    border-top: 1px solid #ddd;
    font-size: 0.85em;
    color: #777;
}

footer a {
    color: #007bff;
    text-decoration: none;
}

footer a:hover {
    text-decoration: underline;
}

edit filepath: public/script.js
content: document.addEventListener('DOMContentLoaded', function() {
    const urlInput = document.getElementById('urlInput');
    const proxyFrame = document.getElementById('proxyFrame');
    const headersDisplay = document.getElementById('headersDisplay');
    const themeSelector = document.getElementById('themeSelector');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const loadingSpinner = document.getElementById('loadingSpinner');

    document.querySelector('button').addEventListener('click', function() {
        loadProxy();
    });

    urlInput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            loadProxy();
        }
    });

    function loadProxy() {
        const url = urlInput.value;
        if (url) {
            showLoading();
            proxyFrame.src = '/api/proxy?url=' + encodeURIComponent(url);
            fetchHeaders(url);
        } else {
            alert('Please enter a URL.');
        }
    }

    function fetchHeaders(url) {
        fetch('/api/headers?url=' + encodeURIComponent(url))
            .then(response => response.json())
            .then(headers => {
                headersDisplay.textContent = JSON.stringify(headers, null, 2);
                hideLoading();
            })
            .catch(error => {
                console.error('Error fetching headers:', error);
                headersDisplay.textContent = 'Error fetching headers.';
                hideLoading();
            });
    }

    function showLoading() {
        loadingSpinner.style.display = 'flex';
    }

    function hideLoading() {
        loadingSpinner.style.display = 'none';
    }

    themeSelector.addEventListener('click', function() {
        themeDropdown.classList.toggle('show');
    });

    document.querySelectorAll('.theme-item').forEach(item => {
        item.addEventListener('click', function() {
            const theme = this.dataset.theme;
            document.documentElement.setAttribute('data-theme', theme);
            themeDropdown.classList.remove('show');
            localStorage.setItem('selectedTheme', theme);
        });
    });

    document.addEventListener('click', function(event) {
        if (!themeSelector.contains(event.target) && !themeDropdown.contains(event.target)) {
            themeDropdown.classList.remove('show');
        }
    });

    const savedTheme = localStorage.getItem('selectedTheme');
    if (savedTheme) {
        document.documentElement.setAttribute('data-theme', savedTheme);
    }
});

edit filepath: public/index.html
content: <!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Proxy</title>
    <link rel="stylesheet" href="public/style.css">
    <link rel="icon" href="public/icon.svg" type="image/svg+xml">
</head>
<body>
    <button id="themeSelector">Change Theme</button>
    <div class="theme-dropdown">
        <div class="theme-item" data-theme="light">
            <span class="theme-preview" style="background-color: #f0f0f0;"></span> Light
        </div>
        <div class="theme-item" data-theme="dark">
            <span class="theme-preview" style="background-color: #333;"></span> Dark
        </div>
        <div class="theme-item" data-theme="blue">
            <span class="theme-preview" style="background-color: #add8e6;"></span> Blue
        </div>
        <div class="theme-item" data-theme="green">
            <span class="theme-preview" style="background-color: #90ee90;"></span> Green
        </div>
    </div>
    <div class="container">
        <h1>Web Proxy</h1>
        <div class="input-area">
            <input type="text" id="urlInput" placeholder="Enter URL">
            <button>Go</button>
        </div>
        <div id="loadingSpinner">
            <div class="spinner"></div>
        </div>
        <div class="content-area">
            <iframe id="proxyFrame"></iframe>
        </div>
        <div class="info-area">
            <h2>Headers</h2>
            <pre id="headersDisplay"></pre>
        </div>
    </div>
    <footer>
        <p>
            &copy; 2024 Web Proxy. All rights reserved.
            <a href="https://example.com/privacy">Privacy Policy</a> |
            <a href="https://example.com/terms">Terms of Service</a>
        </p>
    </footer>
    <script src="public/script.js"></script>
</body>
</html>

edit filepath: api/proxy.js
content: const { URL } = require('url');
const https = require('https');
const http = require('http');

module.exports = (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        res.status(400).send('URL parameter is missing');
        return;
    }

    try {
        new URL(targetUrl);
    } catch (error) {
        res.status(400).send('Invalid URL');
        return;
    }

    const proxyRequest = (url) => {
        return new Promise((resolve, reject) => {
            const parsedUrl = new URL(url);
            const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.pathname + parsedUrl.search,
                method: 'GET',
                headers: {
                    'User-Agent': req.headers['user-agent'] || 'WebProxy',
                    'Accept': req.headers['accept'] || '*/*',
                    'Referer': parsedUrl.origin
                }
            };

            const protocol = parsedUrl.protocol === 'https:' ? https : http;
            const proxyReq = protocol.request(options, proxyRes => {
                res.writeHead(proxyRes.statusCode, proxyRes.headers);
                proxyRes.pipe(res, { end: true });
                resolve();
            });

            proxyReq.on('error', error => {
                reject(error);
            });

            proxyReq.end();
        });
    };

    proxyRequest(targetUrl)
        .catch(error => {
            console.error('Proxy error:', error);
            res.status(500).send('Proxy error');
        });
};

edit filepath: api/headers.js
content: const { URL } = require('url');
const https = require('https');
const http = require('http');

module.exports = (req, res) => {
    const targetUrl = req.query.url;

    if (!targetUrl) {
        res.status(400).send('URL parameter is missing');
        return;
    }

    try {
        new URL(targetUrl);
    } catch (error) {
        res.status(400).send('Invalid URL');
        return;
    }

    const fetchHeaders = (url) => {
        return new Promise((resolve, reject) => {
            const parsedUrl = new URL(url);
            const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.pathname + parsedUrl.search,
                method: 'HEAD',
            };

            const protocol = parsedUrl.protocol === 'https:' ? https : http;
            const headerReq = protocol.request(options, headerRes => {
                resolve(headerRes.headers);
            });

            headerReq.on('error', error => {
                reject(error);
            });

            headerReq.end();
        });
    };

    fetchHeaders(targetUrl)
        .then(headers => {
            res.status(200).json(headers);
        })
        .catch(error => {
            console.error('Error fetching headers:', error);
            res.status(500).send('Error fetching headers');
        });
};

edit filepath: package.json
content: {
  "name": "web-proxy",
  "version": "1.0.0",
  "description": "A simple web proxy",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  },
  "devDependencies": {}
}

edit filepath: index.js
content: const express = require('express');
const app = express();
const proxy = require('./api/proxy');
const headers = require('./api/headers');
const path = require('path');

const port = process.env.PORT || 3000;

app.use('/public', express.static(path.join(__dirname, 'public')));

app.get('/api/proxy', (req, res) => {
    proxy(req, res);
});

app.get('/api/headers', (req, res) => {
    headers(req, res);
});

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
    console.log(`Server listening on port ${port}`);
});

edit filepath: .gitignore
content: node_modules/
edit filepath: public/icon.svg
content: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="currentColor" d="M12 2L4.5 20.29l.71.71L12 18l6.79 3 .71-.71z"/></svg>

edit filepath: theme.js
content: const themes = {
  light: {
    "--background-color": "#f4f4f4",
    "--container-color": "#fff",
    "--text-color": "#333",
    "--input-border-color": "#ddd",
    "--button-color": "#5cb85c"
  },
  dark: {
    "--background-color": "#333",
    "--container-color": "#444",
    "--text-color": "#eee",
    "--input-border-color": "#555",
    "--button-color": "#6cae6c"
  }
};

function applyTheme(themeName) {
  const theme = themes[themeName];
  for (const key in theme) {
    document.documentElement.style.setProperty(key, theme[key]);
  }
}

edit filepath: public/offline.html
content: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offline</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            text-align: center;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>You are currently offline</h1>
        <p>Please check your internet connection and try again.</p>
    </div>
</body>
</html>