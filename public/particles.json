{
  "particles": {
    "number": {
      "value": 80,
      "density": {
        "enable": true,
        "value_area": 800
      }
    },
    "color": {
      "value": "#00ffff"
    },
    "shape": {
      "type": "circle",
      "stroke": {
        "width": 0,
        "color": "#000000"
      },
      "polygon": {
        "nb_sides": 5
      },
      "image": {
        "src": "img/github.svg",
        "width": 100,
        "height": 100
      }
    },
    "opacity": {
      "value": 0.5,
      "random": false,
      "anim": {
        "enable": false,
        "speed": 1,
        "opacity_min": 0.1,
        "sync": false
      }
    },
    "size": {
      "value": 5,
      "random": true,
      "anim": {
        "enable": false,
        "speed": 40,
        "size_min": 0.1,
        "sync": false
      }
    },
    "line_linked": {
      "enable": true,
      "distance": 150,
      "color": "#00ffff",
      "opacity": 0.4,
      "width": 1
    },
    "move": {
      "enable": true,
      "speed": 6,
      "direction": "none",
      "random": false,
      "straight": false,
      "out_mode": "out",
      "attract": {
        "enable": false,
        "rotateX": 600,
        "rotateY": 1200
      }
    }
  },
  "interactivity": {
    "detect_on": "canvas",
    "events": {
      "onhover": {
        "enable": true,
        "mode": "repulse"
      },
      "onclick": {
        "enable": true,
        "mode": "push"
      },
      "resize": true
    },
    "modes": {
      "grab": {
        "distance": 400,
        "line_linked": {
          "opacity": 1
        }
      },
      "bubble": {
        "distance": 400,
        "size": 40,
        "duration": 2,
        "opacity": 0.8,
        "speed": 3
      },
      "repulse": {
        "distance": 200
      },
      "push": {
        "particles_nb": 4
      },
      "remove": {
        "particles_nb": 2
      }
    }
  },
  "retina_detect": true,
  "config_demo": {
    "hide_card": false,
    "background_color": "#b61924",
    "background_image": "",
    "background_position": "50% 50%",
    "background_repeat": "no-repeat",
    "background_size": "cover"
  }
}
edit filepath: public/particles.js
content: /* particlesJS('dom-id', params);
/* @license http://opensource.org/licenses/MIT - MIT License */
/*

particlesJS - v2.0.0
Copyright (c) 2015 Vincent Garreau vincentgarreau.com - Released under the MIT license

*/

var pJS = function(tag_id, params){

  var canvas = document.querySelector('#'+tag_id+' > .particles-js-canvas-el');

  this.pJS = {
    canvas: {
      el: canvas,
      w: canvas.offsetWidth,
      h: canvas.offsetHeight
    },
    particles: {
      number: params.particles.number.value,
      color: params.particles.color.value,
      shape: params.particles.shape.type,
      opacity: {
        value: params.particles.opacity.value,
        anim: params.particles.opacity.anim.enable
      },
      size: {
        value: params.particles.size.value,
        anim: params.particles.size.anim.enable
      },
      line_linked: {
        enable: params.particles.line_linked.enable,
        distance: params.particles.line_linked.distance,
        color: params.particles.line_linked.color,
        opacity: params.particles.line_linked.opacity
      },
      move: {
        enable: params.particles.move.enable,
        speed: params.particles.move.speed,
        direction: params.particles.move.direction,
        random: params.particles.move.random,
        out_mode: params.particles.move.out_mode
      },
      array: []
    },
    interactivity: {
      mouse: {
        pos_x: 0,
        pos_y: 0,
        click_pos_x: 0,
        click_pos_y: 0
      },
      detect_on: params.interactivity.detect_on,
      mode: params.interactivity.events.onhover.mode,
      events: {
        onclick: {
          enable: params.interactivity.events.onclick.enable,
          mode: params.interactivity.events.onclick.mode
        },
        resize: {
          enable: params.interactivity.events.resize
        }
      }
    },
    retina_detect: params.retina_detect
  };

  this.pJS.particles.color_rgb = hexToRgb(this.pJS.particles.color);
  this.pJS.particles.line_linked.color_rgb_line = hexToRgb(this.pJS.particles.line_linked.color);

  /* ---------- Canvas creation ---------- */

  canvas.width = this.pJS.canvas.w;
  canvas.height = this.pJS.canvas.h;

  /* ---------- Particles creation ---------- */

  window.addEventListener('resize', function(){

    /* ---------- Canvas width/height ---------- */

    this.pJS.canvas.w = canvas.offsetWidth;
    this.pJS.canvas.h = canvas.offsetHeight;

    /* ---------- Reset canvas ---------- */

    canvas.width = this.pJS.canvas.w;
    canvas.height = this.pJS.canvas.h;

    /* ---------- New particles ---------- */

    if(this.pJS.interactivity.mouse.click_pos_x || this.pJS.interactivity.mouse.click_pos_y){
      this.pJS.interactivity.mouse.click_pos_x = 0;
      this.pJS.interactivity.mouse.click_pos_y = 0;
    }

    this.pJS.particles.array = [];
    this.pJS.particles.array = [];

    this.pJS.particles.number = params.particles.number.value;
    this.pJS.particles.number = (this.pJS.particles.number > canvas.width * canvas.height / 2000) ? Math.floor(canvas.width * canvas.height / 2000) : this.pJS.particles.number;

    createParticles();

  }.bind(this));

  function createParticles(){
    for(var i = 0; i < this.pJS.particles.number; i++){
      this.pJS.particles.array.push( new Particle(this.pJS, params.particles.shape.type) );
    }
  }

  createParticles();

  /* ---------- Animation ---------- */

  function animloop(){
    draw();
    requestAnimFrame(animloop);
  }

  animloop();

  /* ---------- Draw ---------- */

  function draw(){

    /* ---------- Clear canvas ---------- */

    canvas.getContext('2d').clearRect(0, 0, this.pJS.canvas.w, this.pJS.canvas.h);

    /* ---------- Update particles ---------- */

    for(var i = 0; i < this.pJS.particles.number; i++){
      var p = this.pJS.particles.array[i];

      p.draw();
    }

    /* ---------- Mouse interaction ---------- */

    if(this.pJS.interactivity.mouse.click_pos_x || this.pJS.interactivity.mouse.click_pos_y){
      if(this.pJS.interactivity.events.onclick.enable){
        //onclick_particle();
      }
    }

  }

  /* ---------- Vendors ---------- */

  window.requestAnimFrame = (function(){
    return  window.requestAnimationFrame       ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame    ||
        window.oRequestAnimationFrame      ||
        window.msRequestAnimationFrame     ||
        function(callback){
          window.setTimeout(callback, 1000 / 60);
        };
  })();

  function hexToRgb(hex){
    // By Tim Down - http://stackoverflow.com/a/5624139/3493650
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
      return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }

  /* ---------- Particle class ---------- */

  function Particle(pJS, shape){

    var _this = this;

    this.x = Math.random() * pJS.canvas.w;
    this.y = Math.random() * pJS.canvas.h;

    this.vx = ((Math.random() - 0.5) * pJS.particles.move.speed)   ;
    this.vy = ((Math.random() - 0.5) * pJS.particles.move.speed)  ;

    this.radius = (pJS.particles.size.anim) ? Math.random() * pJS.particles.size.value : pJS.particles.size.value;

    this.color = 'rgba('+pJS.particles.color_rgb.r+','+pJS.particles.color_rgb.g+','+pJS.particles.color_rgb.b+','+pJS.particles.opacity.value+')';

    this.draw = function(){
      pJS.canvas.el.getContext('2d').fillStyle = this.color;
      pJS.canvas.el.getContext('2d').beginPath();

      switch(shape){
        case 'circle':
          pJS.canvas.el.getContext('2d').arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
        break;

        case 'edge':
          pJS.canvas.el.getContext('2d').rect(this.x, this.y, this.radius, this.radius);
        break;
      }

      pJS.canvas.el.getContext('2d').closePath();
      pJS.canvas.el.getContext('2d').fill();

      /* ---------- Move the particle ---------- */

      this.x += this.vx;
      this.y += this.vy;

      /* ---------- All the edges ---------- */

      if(this.x < -this.radius){
        this.x = pJS.canvas.w + this.radius;
      }
      else if(this.x > pJS.canvas.w + this.radius){
        this.x = -this.radius;
      }

      if(this.y < -this.radius){
        this.y = pJS.canvas.h + this.radius;
      }
      else if(this.y > pJS.canvas.h + this.radius){
        this.y = -this.radius;
      }
    }
  }
};

/* ---------- Particles.js global ---------- */

window.particlesJS = function(tag_id, params){
  return new pJS(tag_id, params);
};

window.particlesJS.load = function(tag_id, path_json, callback){

  /* ---------- xhr ---------- */

  var xobj = new XMLHttpRequest();
      xobj.overrideMimeType("application/json");
  xobj.open('GET', path_json, true); // Replace 'my_data' with the path to your JSON file
  xobj.onreadystatechange = function () {
    if (xobj.readyState == 4 && xobj.status == "200") {
      // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
      callback(JSON.parse(xobj.responseText));
    }
  };
  xobj.send(null);
};
edit filepath: public/index.html
content: <!DOCTYPE html>
<html>
<head>
    <title>Web Proxy</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <div id="particles-js"></div>
    <div class="container">
        <h1>Web Proxy</h1>
        <input type="text" id="urlInput" placeholder="Enter URL">
        <button id="proxyButton">Go</button>
        <div id="content"></div>
    </div>
    <script src="particles.js"></script>
    <script>
        particlesJS.load('particles-js', 'particles.json', function() {
          console.log('callback - particles.js config loaded');
        });
    </script>
    <script src="script.js"></script>
</body>
</html>
edit filepath: public/style.css
content: body {
    font-family: 'Arial', sans-serif;
    background-color: #000;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden; /* Hide scrollbars */
}

#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: -1; /* Place behind content */
}

.container {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
    text-align: center;
    width: 80%;
    max-width: 600px;
    color: #fff;
    border: 1px solid rgba(0, 255, 255, 0.2);
    backdrop-filter: blur(10px); /* Add blur effect */
}

h1 {
    color: #00ffff;
    text-shadow: 0 0 5px #00ffff;
}

#urlInput {
    width: calc(100% - 20px);
    padding: 10px;
    margin: 10px 0;
    border: 1px solid rgba(0, 255, 255, 0.5);
    border-radius: 4px;
    background-color: rgba(0, 0, 0, 0.3);
    color: #fff;
}

#urlInput::placeholder {
    color: rgba(0, 255, 255, 0.7);
}

#proxyButton {
    padding: 10px 20px;
    background-color: #00ffff;
    color: #000;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    box-shadow: 0 0 5px #00ffff;
}

#proxyButton:hover {
    background-color: #00bfff;
    box-shadow: 0 0 10px #00bfff;
}

#content {
    margin-top: 20px;
    text-align: left;
    border: 1px solid rgba(0, 255, 255, 0.3);
    padding: 10px;
    border-radius: 4px;
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
}

.error {
    color: #ff4d4d;
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        width: 95%;
    }

    #urlInput {
        width: calc(100% - 10px);
    }
}
edit filepath: